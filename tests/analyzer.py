#!/usr/bin/env python3

import sys
import json
import os
import argparse
import imp
import base64

tabulate_s = base64.b64decode(b'')
tabulate = imp.new_module('tabulate')
exec( tabulate_s, tabulate.__dict__)

columns = [
            'count',
            't_sum',
            't_avg',
            'operation',
            'key'
            ]

backend = None

parser = argparse.ArgumentParser()
parser.add_argument("--hide", choices=['count', 't_sum','t_avg','key'], nargs='+', help="Hide specified column")
parser.add_argument("--log", choices=["http", "duration", "all"], default="all", help="Log to analayse")
parser.add_argument("--sort", choices=columns + ['D'+c for c in columns], default='count', help="Sort criteria.")
parser.add_argument("--groupby", choices=['bucket'], default='bucket', help="Goruping by criteria")
parser.add_argument("--min", type=float, default=0, help="Duration below this time will be omitted")
parser.add_argument("--operation", choices=['bind', 'add', 'modify', 'lookup', 'search', 'delete', 'delete_search', 'delete_tree'], default=['bind', 'add', 'modify', 'lookup', 'search', 'delete', 'delete_search', 'delete_tree'], nargs='+', help="Database operations to include")

parser.add_argument("--type", choices=["csv", "html", "text"], default="text", help="Output type")

parser.add_argument("dir", help="Path to log dir or file")

args = parser.parse_args()

if not args.dir:
    args.print_help()
    sys.exit()

def sort_result(result):

    descending = False
    order_by = args.sort

    if order_by[0] == 'D':
        order_by = order_by[1:]
        descending = True

    result.sort(key=lambda mydic: mydic[order_by])

    if descending:
        result.reverse()

def get_formatted_str(v):
    if type(v) == type(1):
        return str(v).rjust(8)
    elif type(v) == type(1.1):
        return '{:0.3f}'.format(v).rjust(8)
    else:
        return v

def is_hidden(c):
    if args.hide and c in args.hide:
        return True

def print_result(result, k, heading):

    columnsl = columns[:]
    #columnsl.remove('operation')
    if backend in ('sql', 'spanner'):
        columnsl.insert(-1, 'table')
    sort_result(result)

    display_columns = []
    for c in columnsl:
        if not is_hidden(c):
            display_columns.append(c)

    tbl_data = []
    for d in result:
        row = []
        for c in display_columns:
            row.append(d[c])
        tbl_data.append(row)

    tablefmt = 'html' if args.type == 'html' else None

    footer = {'count':0, 't_sum':0, 't_avg':0}

    for ln, row in enumerate(result):
        for c in columnsl:
            if c in footer and not is_hidden(c):
                footer[c] += row[c]

    footer['t_avg'] = footer['t_avg'] / len(result)
    tbl_data.append(['', footer['t_sum'], footer['t_avg'], 'GRANT TOTAL'])

    print(tabulate.tabulate(tbl_data, display_columns, tablefmt))



def http_log():

    if os.path.isdir(args.dir):
        fn = os.path.join(args.dir, 'http_request_response.log')
        if not os.path.exists(fn):
            print("File {0} does not exists".format(fn))
            return
    else:
        fn = args.dir
        if not os.path.isfile(args.dir):
            print("File {0} does not exists".format(fn))
            return

    if not 'http' in fn:
        return

    rdict = {}

    for l in open(fn):
        ls = l.strip().split(' - ')
        data = json.loads(ls[-1])
        if data.get('method') == 'GET':
            if data.get('duration'):
                d = float(data['duration'][2:-1])
                if d > args.min:
                    if data['path'] in rdict:
                        rdict[data['path']].append(d)
                    else:
                        rdict[data['path']] = [d]

    if not rdict:
        print("\n *** NO HTTP LOG ANALYSES IS AVAILABLE ***")
        return

    sn = 0
    st = 0

    result=[]

    for path in rdict:
        data = rdict[path]
        n = len(data)
        ssn = str(n).rjust(5)
        sn += n
        t = sum(data)
        st += t
        a= t/n

        result.append({'count': n, 't_sum': t, 't_avg': a, 'key': path})

    print_result(result, 'path', "HTTP REQUEST LOG ANALYSES")


def durations():
    global backend

    if os.path.isdir(args.dir):
        fn = os.path.join(args.dir, 'jans-auth_persistence_duration.log')
        if not os.path.exists(fn):
            print("File {0} does not exists".format(fn))
            return
    else:
        fn = args.dir
        if not os.path.isfile(args.dir):
            print("File {0} does not exists".format(fn))
            return

    rdict = {}
    operations = {}
    buckets = {}

    for i, l in enumerate(open(fn)):
        ndash = l.find(' - ')
        la = l[ndash+3:]
        nsp = la.find(' ')
        backend = la[:nsp].strip().lower()

        la = la[nsp:].strip()
        ls = la.split(',')

        cols = {}
        for _ in ls:
            tmp_ = _.strip().split(':')
            if len(tmp_) == 2:
                cols[tmp_[0].strip()] = tmp_[1].strip()


        if not 'operation' in cols:
            continue

        operation = cols['operation']

        if backend == 'couchbase':
            bucket = ls[3].strip()[8:]

            if not bucket in buckets:
                buckets[bucket] = []

        if not cols['operation'] in args.operation:
            continue

        #ds = ls[2].strip()[12:-1]
        ds = cols['duration'][2:-1]
        if 'M' in ds:
            m,s=ds.split('M')
            d= float(m)*60 + float(s)
        else:
            d = float(ds)

        if d > args.min:
            #ls = l.strip().split(',')
            if len(ls)>5:
                p = ls[4].strip()
            else:
                p = ls[3].strip()

            if p in rdict:
                rdict[p].append(d)
            else:
                rdict[p] = [d]

            operations[p] = operation

    if args.groupby == 'bucket':
        print("Grouped by", args.groupby)

    sn = 0
    st = 0

    result = []

    for path in rdict:

        data = rdict[path]
        n = len(data)
        sn += n
        t = sum(data)
        a = t/n
        result.append({'count': n, 't_sum': t, 't_avg': a, 'key': path, 'table': cols.get('table'), 'operation': operations[path]})

        st += t

    print_result(result, "expression", "DURATIONS LOG ANALYSES")


if args.type == 'html':
    print('<!DOCTYPE html>\n<html>\n<head>')
    print('<style>table, th, td {padding-right:10px; padding-left:10px; border: 1px solid black; border-collapse: collapse;} * {font-family: Arial, Helvetica, sans-serif;}</style>')
    print('</head>\n<body>\n')

if args.log in ('duration', 'all'):
    durations()

if args.log in ('http', 'all'):
    http_log()

if args.type == 'html':
    print('\n</body>\n</html>')
